from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from src.states.states import RegistrationStates, ScoreStates
from src.crud.crud import StudentCRUD, ScoreCRUD
from src.keyboards.keyboards import get_main_menu, get_subjects_keyboard
router = Router()
@router.message(Command("start"))
async def cmd_start(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = message.from_user.id
    if await StudentCRUD.student_exists(session, telegram_id):
        student = await StudentCRUD.get_student_by_telegram_id(session, telegram_id)
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {student.first_name} {student.last_name}!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –±–∞–ª–ª–æ–≤ –ï–ì–≠!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    telegram_id = message.from_user.id
    if await StudentCRUD.student_exists(session, telegram_id):
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–ª–∞–º–∏.",
            reply_markup=get_main_menu()
        )
        return
    await message.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationStates.waiting_for_first_name)
@router.message(StateFilter(RegistrationStates.waiting_for_first_name))
async def process_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    first_name = message.text.strip()
    if not first_name or len(first_name) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    await state.update_data(first_name=first_name)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.waiting_for_last_name)
@router.message(StateFilter(RegistrationStates.waiting_for_last_name))
async def process_last_name(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    last_name = message.text.strip()
    if not last_name or len(last_name) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    data = await state.get_data()
    first_name = data['first_name']
    try:
        student = await StudentCRUD.create_student(
            session,
            message.from_user.id,
            first_name,
            last_name
        )
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}!\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=get_main_menu()
        )
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register"
        )
    await state.clear()
@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã")
@router.message(Command("enter_scores"))
async def enter_scores(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤"""
    telegram_id = message.from_user.id
    if not await StudentCRUD.student_exists(session, telegram_id):
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –±–∞–ª–ª:",
        reply_markup=get_subjects_keyboard()
    )
@router.callback_query(F.data.startswith("subject_"))
async def process_subject_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject = callback.data.replace("subject_", "")
    await state.update_data(subject=subject)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–ª (–æ—Ç 0 –¥–æ 100):"
    )
    await state.set_state(ScoreStates.waiting_for_score)
    await callback.answer()
@router.message(StateFilter(ScoreStates.waiting_for_score))
async def process_score_input(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±–∞–ª–ª–∞"""
    try:
        score = int(message.text.strip())
        if not (0 <= score <= 100):
            await message.answer("–ë–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        data = await state.get_data()
        subject = data['subject']
        student = await StudentCRUD.get_student_by_telegram_id(session, message.from_user.id)
        await ScoreCRUD.add_score(session, student.id, subject, score)
        await message.answer(
            f"–ë–∞–ª–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–ë–∞–ª–ª: {score}",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")
@router.message(F.text == "–ú–æ–∏ –±–∞–ª–ª—ã")
@router.message(Command("view_scores"))
async def view_scores(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–ª–æ–≤"""
    telegram_id = message.from_user.id
    student = await StudentCRUD.get_student_by_telegram_id(session, telegram_id)
    if not student:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    scores = await ScoreCRUD.get_student_scores(session, student.id)
    if not scores:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
            reply_markup=get_main_menu()
        )
        return
    scores_text = f"–í–∞—à–∏ –±–∞–ª–ª—ã –ï–ì–≠:\n\n"
    total_score = 0
    for score in scores:
        scores_text += f"{score.subject}: {score.score} –±–∞–ª–ª–æ–≤\n"
        total_score += score.score
    scores_text += f"\nüìà –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤: {total_score}"
    await message.answer(scores_text, reply_markup=get_main_menu())
@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    help_text = (
        "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
        "/enter_scores - –í–≤–æ–¥ –±–∞–ª–ª–æ–≤ –ï–ì–≠\n"
        "/view_scores - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –±–∞–ª–ª–æ–≤\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /register\n"
        "2. –í–≤–æ–¥–∏—Ç–µ –±–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
        "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        "üí° –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å - –Ω–æ–≤—ã–π –±–∞–ª–ª –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä—ã–π –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–µ–¥–º–µ—Ç—É."
    )
    await message.answer(help_text, reply_markup=get_main_menu())
